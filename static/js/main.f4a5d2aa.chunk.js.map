{"version":3,"sources":["api/openWeatherMap.js","api/weatherBit.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["getWeatherFromOpenWeatherMap","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","city","country","requestUrl","res","wrap","_context","prev","next","concat","toLowerCase","getCode","getName","toUpperCase","fetch","sent","json","abrupt","stop","_x","_x2","apply","this","arguments","parseData","data","main","weather","weatherInfo","length","name","iconId","id","toString","description","temp","getWeatherFromWeatherBit","city_name","code","Weather","props","source","react_default","createElement","card","title","style","width","height","margin","textTransform","display","alignItems","lib_default","flip","marginLeft","App","state","openWeatherMap","weatherBit","err","loading","handleSubmit","e","preventDefault","_this","form","validateFields","values","openWeatherMapJson","weatherBitJson","console","log","setState","parseOpenWeather","parseWeatherBit","t0","getFieldDecorator","_this$state","paddingTop","justifyContent","padding","es_form","layout","onSubmit","Item","label","rules","required","message","input","placeholder","es_button","type","htmlType","flexWrap","icon","fontSize","spin","components_Weather","Component","Form","create","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4a5d2aa.chunk.js","sourcesContent":["import { getCode, getName } from 'country-list'\n\nconst OPEN_WEATHER_MAP_URL = 'https://api.openweathermap.org/data/2.5/weather?appid=e32facacb4f9e1ab10610126e4ebf902&units=metric'\n\nexport const getWeatherFromOpenWeatherMap = async (city, country) => {\n  const requestUrl = `${OPEN_WEATHER_MAP_URL}&q=${city.toLowerCase()},${getCode(country.toLowerCase()) || getName(country.toUpperCase())}`\n  const res = await fetch(requestUrl)\n  return await res.json()\n}\n\nexport const parseData = (data) => {\n  const { main, weather } = data\n  const weatherInfo = weather.length > 0 ? weather[0] : null\n\n  return {\n    city: data.name,\n    iconId: weatherInfo.id.toString(),\n    description: weatherInfo.description,\n    temp: main.temp\n  }\n}","import { getCode } from 'country-list'\n\nconst WEATHERBIT_URL = 'https://api.weatherbit.io/v2.0/current?key=2e2c98279957405cba9fe5819c5c0b5d'\n\nexport const getWeatherFromWeatherBit = async (city, country) => {\n  const requestUrl = `${WEATHERBIT_URL}&city=${city.toLowerCase()},${getCode(country.toLowerCase()) || country.toUpperCase()}`\n  const res = await fetch(requestUrl)\n  return await res.json()\n}\n\nexport const parseData = (json) => {\n  const { data } = json\n  const weatherInfo = data.length > 0 ? data[0] : null\n\n  return {\n    city: weatherInfo.city_name,\n    iconId: weatherInfo ? weatherInfo.weather.code.toString() : null,\n    description: weatherInfo ? weatherInfo.weather.description : null, \n    temp: weatherInfo ? weatherInfo.temp : null\n  }\n}","import React from 'react'\nimport WeatherIcon from 'react-icons-weather';\nimport { Card } from 'antd';\n\nconst Weather = (props) => {\n  const { source, description, temp, iconId, city } = props\n\n  return (\n    <Card title={source} style={{ width: 300, height: 300, margin: '20px' }}>\n      <h3 style={{textTransform: 'capitalize'}}>{city}</h3>\n      <div style={{ display: 'flex', alignItems: \"center\" }}>\n        <WeatherIcon name=\"owm\" iconId={iconId} flip=\"horizontal\" />\n        <div style={{marginLeft: 10}}>{description}</div>\n      </div>\n      <p>{temp}Â°C</p>\n    </Card>\n  )\n}\n\nexport default Weather;","import React, { Component } from 'react'\nimport { Form, Button, Input, Icon } from 'antd'\nimport { getWeatherFromOpenWeatherMap, parseData as parseOpenWeather } from './api/openWeatherMap'\nimport { getWeatherFromWeatherBit, parseData as parseWeatherBit } from './api/weatherBit'\nimport Weather from './components/Weather'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    openWeatherMap: null,\n    weatherBit: null,\n    err: null,\n    loading: false\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields(async (err, values) => {\n      if (!err) {\n        const { city, country } = values;\n        console.log('Received values of form: ', values);\n        this.setState({\n          openWeatherMap: null,\n          weatherBit: null,\n          loading: true,\n          err: null\n        })\n        try {\n          const openWeatherMapJson = await getWeatherFromOpenWeatherMap(city, country)\n          const weatherBitJson = await getWeatherFromWeatherBit(city, country)\n\n          this.setState({\n            openWeatherMap: parseOpenWeather(openWeatherMapJson),\n            weatherBit: parseWeatherBit(weatherBitJson),\n            loading: false\n          })\n        } catch (err) {\n          this.setState({\n            err,\n            loading: false\n          })\n        }\n      }\n    });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const { openWeatherMap, weatherBit, loading, err } = this.state;\n    return (\n      <div style={{ height: '100%', paddingTop: '15%' }}>\n        <div style={{ display: 'flex', justifyContent: 'center', padding: 40 }}>\n          <Form layout='inline' onSubmit={this.handleSubmit}>\n            <Form.Item label=\"City\">\n              {getFieldDecorator('city', {\n                rules: [{ required: true, message: 'Please input city!' }],\n              })(\n                <Input placeholder=\"Ottawa\" />\n              )}\n            </Form.Item>  \n            <Form.Item label=\"Country\" >\n              {getFieldDecorator('country', {\n                rules: [{ required: true, message: 'Please input country!' }],\n              })(\n                <Input placeholder=\"Canada\" />\n              )}\n            </Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Get weather\n            </Button>\n          </Form>          \n        </div>\n        <div style={{display: 'flex', width: '100%', height: '45%', justifyContent: 'center', alignItems: 'center', flexWrap: 'wrap'}}>\n          {loading && <Icon type=\"loading\" style={{ fontSize: 24 }} spin />}\n          {err && <div style={{display: 'flex', height: 100, alignItems: 'center'}}>City not found</div>}\n          {openWeatherMap && (\n            <Weather\n              city={openWeatherMap.city}\n              iconId={openWeatherMap.iconId}\n              source=\"Open Weather Map\"\n              temp={openWeatherMap.temp}\n              description={openWeatherMap.description}\n            />\n          )}\n          {weatherBit && (\n            <Weather\n              city={weatherBit.city}\n              iconId={weatherBit.iconId}\n              source=\"Weather Bit\"\n              temp={weatherBit.temp}\n              description={weatherBit.description}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Form.create({ name: 'customized_form_controls' })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}